# Railsにおけるデータベースの設定ファイル。
# Railsアプリケーションを作成すると自動的に生成され、デフォルトではSQLiteを使用する前提で作成されます。
# MySQL等のSQLite以外のデータベースを使用する前提で生成する場合は、
# アプリケーションを作成する際に明示的にオプションでデータベースを指定します。
# $ rails new アプリケーション名 -d データベース
# $ rails new アプリケーション名 --database=データベース

# 「&」の部分はアンカーという「YAML」の記述方法。
# 「&」に続けて「default」という名前をつけると、「default」という名前でハッシューのデータを保存することができます
default: &default
  # 使用するデータベース種類
  adapter: mysql2
  # 文字コード
  encoding: utf8mb4
  # pool:「コネクションプール」。データベースへ接続した時の接続状態を保存しておく役割をします。
  # データベースに再接続する場合、この「コネクションプール」を利用することによって接続時間を短縮する仕組み
  # この「コネクションプール」の数が足りないとリクエストに対する待ち時間が増えてしまい、
  # 「ActiveRecord::ConnectionTimeoutError」などが発生するんだとか。デフォルト値は５。
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  username: <%= ENV["MYSQL_ROOT_USER"] %>
  # githubへ上げる事を想定してパスワードはなるべくなら環境変数で設定した方がいい
  password: <%= ENV["MYSQL_ROOT_PASSWORD"] %>
  # host: localhostからの変更
  # データベースのアクセス先にdbを指定
  host: db

# デフォルトでは、開発環境のdbを参照する
development:
  # 「＊」はエイリアス。「＊」をつけることによって、アンカーの内容を呼び出します。
  <<: *default
  # デフォルトのデータベースの命名ルールは「アプリ名_development」
  # 「rails new」コマンドを実行した際に、自動で「database.yml」に書き加えられる
  # 「database.yml」を編集することで接続するデータベースを変えることも可能です。
  database: rails_app_development

# 警告 test" として定義されたデータベースは "rake" を実行したときに消去され、開発用データベースから再作成されます。
# このdbをdevelopmentやproductionと同じに設定しないでください。
test:
  <<: *default
  database: rails_app_test

production:
  <<: *default
  database: <%= ENV['DB_DATABASE'] %>
  adapter: mysql2
  encoding: utf8mb4
  charset: utf8mb4
  collation: utf8mb4_general_ci
  host: <%= ENV['DB_HOST'] %>
  username: <%= ENV['DB_USERNAME'] %>
  password: <%= ENV['DB_PASSWORD'] %>

# production:
#   <<: *default
#   database: myapp_production
#   username: myapp
#   password: <%= ENV['MYAPP_DATABASE_PASSWORD'] %>
